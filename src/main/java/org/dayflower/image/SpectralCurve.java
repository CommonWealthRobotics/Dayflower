/**
 * Copyright 2020 J&#246;rgen Lundgren
 * 
 * This file is part of Dayflower.
 * 
 * Dayflower is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Dayflower is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Dayflower. If not, see <http://www.gnu.org/licenses/>.
 */
package org.dayflower.image;

/**
 * A {@code SpectralCurve} is used for sampled or analytic spectral data.
 * 
 * @since 1.0.0
 * @author J&#246;rgen Lundgren
 */
public abstract class SpectralCurve {
	private static final double[] CIE_X_BAR = {0.000129900000D, 0.000232100000D, 0.000414900000D, 0.000741600000D, 0.001368000000D, 0.002236000000D, 0.004243000000D, 0.007650000000D, 0.014310000000D, 0.023190000000D, 0.043510000000D, 0.077630000000D, 0.134380000000D, 0.214770000000D, 0.283900000000D, 0.328500000000D, 0.348280000000D, 0.348060000000D, 0.336200000000D, 0.318700000000D, 0.290800000000D, 0.251100000000D, 0.195360000000D, 0.142100000000D, 0.095640000000D, 0.057950010000D, 0.032010000000D, 0.014700000000D, 0.004900000000D, 0.002400000000D, 0.009300000000D, 0.029100000000D, 0.063270000000D, 0.109600000000D, 0.165500000000D, 0.225749900000D, 0.290400000000D, 0.359700000000D, 0.433449900000D, 0.512050100000D, 0.594500000000D, 0.678400000000D, 0.762100000000D, 0.842500000000D, 0.916300000000D, 0.978600000000D, 1.026300000000D, 1.056700000000D, 1.062200000000D, 1.045600000000D, 1.002600000000D, 0.938400000000D, 0.854449900000D, 0.751400000000D, 0.642400000000D, 0.541900000000D, 0.447900000000D, 0.360800000000D, 0.283500000000D, 0.218700000000D, 0.164900000000D, 0.121200000000D, 0.087400000000D, 0.063600000000D, 0.046770000000D, 0.032900000000D, 0.022700000000D, 0.015840000000D, 0.011359160000D, 0.008110916000D, 0.005790346000D, 0.004106457000D, 0.002899327000D, 0.002049190000D, 0.001439971000D, 0.000999949300D, 0.000690078600D, 0.000476021300D, 0.000332301100D, 0.000234826100D, 0.000166150500D, 0.000117413000D, 0.000083075270D, 0.000058706520D, 0.000041509940D, 0.000029353260D, 0.000020673830D, 0.000014559770D, 0.000010253980D, 0.000007221456D, 0.000005085868D, 0.000003581652D, 0.000002522525D, 0.000001776509D, 0.000001251141D};
	private static final double[] CIE_Y_BAR = {0.000003917000D, 0.000006965000D, 0.000012390000D, 0.000022020000D, 0.000039000000D, 0.000064000000D, 0.000120000000D, 0.000217000000D, 0.000396000000D, 0.000640000000D, 0.001210000000D, 0.002180000000D, 0.004000000000D, 0.007300000000D, 0.011600000000D, 0.016840000000D, 0.023000000000D, 0.029800000000D, 0.038000000000D, 0.048000000000D, 0.060000000000D, 0.073900000000D, 0.090980000000D, 0.112600000000D, 0.139020000000D, 0.169300000000D, 0.208020000000D, 0.258600000000D, 0.323000000000D, 0.407300000000D, 0.503000000000D, 0.608200000000D, 0.710000000000D, 0.793200000000D, 0.862000000000D, 0.914850100000D, 0.954000000000D, 0.980300000000D, 0.994950100000D, 1.000000000000D, 0.995000000000D, 0.978600000000D, 0.952000000000D, 0.915400000000D, 0.870000000000D, 0.816300000000D, 0.757000000000D, 0.694900000000D, 0.631000000000D, 0.566800000000D, 0.503000000000D, 0.441200000000D, 0.381000000000D, 0.321000000000D, 0.265000000000D, 0.217000000000D, 0.175000000000D, 0.138200000000D, 0.107000000000D, 0.081600000000D, 0.061000000000D, 0.044580000000D, 0.032000000000D, 0.023200000000D, 0.017000000000D, 0.011920000000D, 0.008210000000D, 0.005723000000D, 0.004102000000D, 0.002929000000D, 0.002091000000D, 0.001484000000D, 0.001047000000D, 0.000740000000D, 0.000520000000D, 0.000361100000D, 0.000249200000D, 0.000171900000D, 0.000120000000D, 0.000084800000D, 0.000060000000D, 0.000042400000D, 0.000030000000D, 0.000021200000D, 0.000014990000D, 0.000010600000D, 0.000007465700D, 0.000005257800D, 0.000003702900D, 0.000002607800D, 0.000001836600D, 0.000001293400D, 0.000000910930D, 0.000000641530D, 0.000000451810D};
	private static final double[] CIE_Z_BAR = {0.000606100000D, 0.001086000000D, 0.001946000000D, 0.003486000000D, 0.006450001000D, 0.010549990000D, 0.020050010000D, 0.036210000000D, 0.067850010000D, 0.110200000000D, 0.207400000000D, 0.371300000000D, 0.645600000000D, 1.039050100000D, 1.385600000000D, 1.622960000000D, 1.747060000000D, 1.782600000000D, 1.772110000000D, 1.744100000000D, 1.669200000000D, 1.528100000000D, 1.287640000000D, 1.041900000000D, 0.812950100000D, 0.616200000000D, 0.465180000000D, 0.353300000000D, 0.272000000000D, 0.212300000000D, 0.158200000000D, 0.111700000000D, 0.078249990000D, 0.057250010000D, 0.042160000000D, 0.029840000000D, 0.020300000000D, 0.013400000000D, 0.008749999000D, 0.005749999000D, 0.003900000000D, 0.002749999000D, 0.002100000000D, 0.001800000000D, 0.001650001000D, 0.001400000000D, 0.001100000000D, 0.001000000000D, 0.000800000000D, 0.000600000000D, 0.000340000000D, 0.000240000000D, 0.000190000000D, 0.000100000000D, 0.000049999990D, 0.000030000000D, 0.000020000000D, 0.000010000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D, 0.000000000000D};
	private static final int WAVELENGTH_MAX = 830;
	private static final int WAVELENGTH_MIN = 360;
	private static final int WAVELENGTH_STEP = (WAVELENGTH_MAX - WAVELENGTH_MIN) / (CIE_X_BAR.length - 1);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * Constructs a new {@code SpectralCurve} instance.
	 */
	protected SpectralCurve() {
		
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * Returns a {@link Color3F} instance in XYZ-color space.
	 * 
	 * @return a {@code Color3F} instance in XYZ-color space
	 */
	public final Color3F toColorXYZ() {
		float x = 0.0F;
		float y = 0.0F;
		float z = 0.0F;
		
		for(int i = 0, j = WAVELENGTH_MIN; i < CIE_X_BAR.length; i++, j += WAVELENGTH_STEP) {
			final float s = sample(j);
			
			x += s * CIE_X_BAR[i];
			y += s * CIE_Y_BAR[i];
			z += s * CIE_Z_BAR[i];
		}
		
		x *= WAVELENGTH_STEP;
		y *= WAVELENGTH_STEP;
		z *= WAVELENGTH_STEP;
		
		return new Color3F(x, y, z);
	}
	
	/**
	 * Returns a sample based on the wavelength {@code lambda} in nanometers.
	 * 
	 * @param lambda the wavelength in nanometers
	 * @return a sample based on the wavelength {@code lambda} in nanometers
	 */
	public abstract float sample(final float lambda);
}